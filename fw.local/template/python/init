#! /bin/sh

#---------------------------------------------------------------------
#                                init                                 
# 
# This is called by the template init method, which is itself called
# by fw-init when a project is being initialized.  It is intended
# for creating files in the project that will remain in the project
# and are owned by the project.  Creation of (symlinks to) files
# owned by the build method should be done at bootstrap time.
#---------------------------------------------------------------------

#---------------------------------------------------------------------
#                           chicken and egg                           
#---------------------------------------------------------------------

which perl >/dev/null 2>/dev/null || {
  echo "python/init: fatal: can't locate perl" 1>&2
  exit 1
}

if test -z "${FW_ROOT}"
  then
    FW_ROOT=`echo "$0" | perl -pe 's%fw/template/python/init$%%;'`
    export FW_ROOT
  fi

test -f "${FW_ROOT}/share/fw/sh/fw-find.sh" || {
  echo "python/init: fatal: can't determine FW_ROOT" 1>&2
  echo "python/init: please set the environment variable" 1>&2
  exit 1
}

. "${FW_ROOT}/share/fw/sh/fw-find.sh"

#---------------------------------------------------------------------
#                              routines                               
#---------------------------------------------------------------------

fw_source "python/init" "sh/fw-exec.sh"
fw_source "python/init" "sh/parse-args.sh"
fw_source "python/init" "sh/validate-args.sh"

#---------------------------------------------------------------------
#                                main                                 
#---------------------------------------------------------------------

fw_exec "build/automake/init" "$@" || fatal "python/init"

parse_args "python/init" "$@"

validate_args "python/init" "name" ""


fw_exec "revision/$revision/ignore-files"       \
  '*.pyc'                                       \
  '*.pyo'                                       \
|| fatal "python/init"

fw_find "template/python/setup.py.in" setup_py

cp -f "$setup_py" "./setup.py.in" || fatal "python/init"
fw_exec "revision/$revision/add-files" "setup.py.in" || fatal "python/init"
fw_exec "revision/$revision/ignore-files" "setup.py" || fatal "python/init"

mkdir ${name} || fatal "python/init"
cat <<'EOD' >> ${name}/__init__.py
# new module
EOD
fw_exec "revision/$revision/add-dir" "${name}" || fatal "python/init"

for dir in tests
  do
    mkdir "$dir" || fatal "python/init"
    fw_exec "revision/$revision/add-dir" "$dir" || fatal "python/init"

    for x in Makefile.am.local
      do
        fw_find "template/python/$dir/$x" file
        test -z "$file" && fatal "python/init"
        cp -f "$file" "$dir" || fatal "python/init"
        chmod +w "$dir/$x" || fatal "python/init"
      done

    for x in tests.py
      do
        fw_find "template/python/$dir/$x" file
        test -z "$file" || {
          cp -f "$file" "$dir" || fatal "python/init"
          chmod +w "$dir/$x" || fatal "python/init"
        }
      done

    (
      cd "$dir" &&                              \
      fw_exec "revision/$revision/add-files"    \
        Makefile.am.local                       \
        tests.py &&                             \
      fw_exec "revision/$revision/ignore-files" \
        Makefile                                \
        '*.pyc'                                 \
        '*.pyo'                                 \
    ) || fatal "python/init"
  done

(
  cd "${name}" &&                                \
  fw_exec "revision/$revision/add-files"         \
    __init__.py &&                               \
  fw_exec "revision/$revision/ignore-files"      \
    '*.pyc'                                      \
    '*.pyo'                                      \
) || fatal "python/init"

 
